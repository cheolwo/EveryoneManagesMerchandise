@using BusinessData.ofPresentationLayer.ofDTO.ofCommon
@using BusinessView.ofViewModels.ofGeneric
@using BusinessView.ofViewModels.ofGeneric.ofCommon
@typeparam T where T : CommodityDTO, new()

@if (_EmployerCommodityPostViewModel == null)
{
    <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
}
else
{
    <h3>EmployerCommodityPostComponent</h3>
    @foreach (var key in _EmployerCommodityPostViewModel.StringProperty.Keys)
    {
        <MudTextField @bind-Value="_EmployerCommodityPostViewModel.StringProperty[key]" Label="@key"></MudTextField>
    }
    @foreach (var key in _EmployerCommodityPostViewModel.IntProperty.Keys)
    {
        <MudTextField @bind-Value="_EmployerCommodityPostViewModel.IntProperty[key]" Label="@key"></MudTextField>
    }
    @foreach (var key in _EmployerCommodityPostViewModel.DateTimeProperty.Keys)
    {
        <MudDatePicker @bind-Date="_EmployerCommodityPostViewModel.DateTimeProperty[key]" Label="@key" />
    }
    <InputFile id="fileInput" OnChange="_EmployerCommodityPostViewModel.UploadFiles" hidden multiple />

<MudButton HtmlTag="label"
           Variant="Variant.Filled"
           Color="Color.Primary"
           StartIcon="@Icons.Filled.CloudUpload"
           for="fileInput">
    Upload Files
</MudButton>
  <MudButton OnClick="PostAsync">Post</MudButton>
}
@code {
    [Parameter] public CommodityPostViewModel<T>? _EmployerCommodityPostViewModel { get; set; }
    public async Task PostAsync()
    {
        try
        {
            _EmployerCommodityPostViewModel.PropertyToEntity();
            await _EmployerCommodityPostViewModel.PostAsync();
        }
        catch (Exception e)
        {

        }
        finally
        {

        }
    }
}
