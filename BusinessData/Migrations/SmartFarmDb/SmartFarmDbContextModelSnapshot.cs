// <auto-generated />
using System;
using BusinessData.ofSmartFarm;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BusinessData.Migrations.SmartFarmDb
{
    [DbContext(typeof(SmartFarmDbContext))]
    partial class SmartFarmDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.10")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BusinessData.Center", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CardNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CardPassword")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Container")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CountryCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Cvv")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EFarmCommodityId")
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("FailLogin")
                        .HasColumnType("int");

                    b.Property<string>("FarmCommodtiyId")
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("FarmControllerId")
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("FaxNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LoginId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MFarmCommodityId")
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SFarmCommodityId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EFarmCommodityId");

                    b.HasIndex("FarmCommodtiyId");

                    b.HasIndex("FarmControllerId");

                    b.HasIndex("MFarmCommodityId");

                    b.HasIndex("SFarmCommodityId");

                    b.ToTable("Center");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Center");
                });

            modelBuilder.Entity("BusinessData.Commodity", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Barcode")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("CenterId")
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Container")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EFarmCommodityId")
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("HsCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MFarmCommodityId")
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("OpponentBusinessUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SFarmCommodityId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CenterId");

                    b.HasIndex("EFarmCommodityId");

                    b.HasIndex("MFarmCommodityId");

                    b.HasIndex("SFarmCommodityId");

                    b.ToTable("Commodity");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Commodity");
                });

            modelBuilder.Entity("BusinessData.EStatus", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("CenterId")
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CommodityId")
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Container")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MStatusId")
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CenterId");

                    b.HasIndex("CommodityId");

                    b.HasIndex("MStatusId");

                    b.ToTable("EStatus");

                    b.HasDiscriminator<string>("Discriminator").HasValue("EStatus");
                });

            modelBuilder.Entity("BusinessData.MStatus", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("CenterId")
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CommodityId")
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Container")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SStatusId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CenterId");

                    b.HasIndex("CommodityId");

                    b.HasIndex("SStatusId");

                    b.ToTable("MStatus");

                    b.HasDiscriminator<string>("Discriminator").HasValue("MStatus");
                });

            modelBuilder.Entity("BusinessData.SStatus", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CenterId")
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CommodityId")
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Container")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Quantity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CenterId");

                    b.HasIndex("CommodityId");

                    b.ToTable("SStatus");

                    b.HasDiscriminator<string>("Discriminator").HasValue("SStatus");
                });

            modelBuilder.Entity("BusinessData.ofSmartFarm.ControllerCommodity", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("ChangedUsers")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Container")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ControllerCommodityId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Docs")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FarmCommodtiyId")
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("ImageofInfos")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FarmCommodtiyId")
                        .IsUnique()
                        .HasFilter("[FarmCommodtiyId] IS NOT NULL");

                    b.ToTable("ControllerCommodity");
                });

            modelBuilder.Entity("BusinessData.ofSmartFarm.EControllerValue", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<float>("AirPressure")
                        .HasColumnType("real");

                    b.Property<string>("ChangedUsers")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Container")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ControllerCommodityId")
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Docs")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EFarmCommodityId")
                        .HasColumnType("nvarchar(30)");

                    b.Property<float>("Humidity")
                        .HasColumnType("real");

                    b.Property<string>("ImageofInfos")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Temperature")
                        .HasColumnType("real");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("WindSpeed")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("ControllerCommodityId");

                    b.HasIndex("EFarmCommodityId");

                    b.ToTable("EControllerValue");
                });

            modelBuilder.Entity("BusinessData.ofSmartFarm.FarmController", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("ChangedUsers")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Container")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ControllerCommodtiyId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Docs")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageofInfos")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SmartFarmId")
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SmartFarmId");

                    b.ToTable("FarmController");
                });

            modelBuilder.Entity("BusinessData.ofSmartFarm.MControllerValue", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<float>("AirPressure")
                        .HasColumnType("real");

                    b.Property<string>("ChangedUsers")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Container")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ControllerCommodityId")
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Docs")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Humidity")
                        .HasColumnType("real");

                    b.Property<string>("ImageofInfos")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MFarmCommodityId")
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Temperature")
                        .HasColumnType("real");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("WindSpeed")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("ControllerCommodityId");

                    b.HasIndex("MFarmCommodityId");

                    b.ToTable("MControllerValue");
                });

            modelBuilder.Entity("BusinessData.ofSmartFarm.SControllerValue", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<float>("AirPressure")
                        .HasColumnType("real");

                    b.Property<string>("ChangedUsers")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Container")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ControllerCommodityId")
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Docs")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Humidity")
                        .HasColumnType("real");

                    b.Property<string>("ImageofInfos")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SFarmCommodityId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<float>("Temperature")
                        .HasColumnType("real");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("WindSpeed")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("ControllerCommodityId");

                    b.HasIndex("SFarmCommodityId");

                    b.ToTable("SControllerValue");
                });

            modelBuilder.Entity("BusinessData.ofSmartFarm.SmartFarm", b =>
                {
                    b.HasBaseType("BusinessData.Center");

                    b.Property<string>("CenterIPAddresses")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CenterMacAddresses")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ChangedUsers")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Docs")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageofInfos")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductLendId")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("SmartFarm");
                });

            modelBuilder.Entity("BusinessData.ofSmartFarm.FarmCommodtiy", b =>
                {
                    b.HasBaseType("BusinessData.Commodity");

                    b.Property<string>("ChangedUsers")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Docs")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageofInfos")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PCommodityId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SmartFarmId")
                        .HasColumnType("nvarchar(30)");

                    b.HasIndex("SmartFarmId");

                    b.HasDiscriminator().HasValue("FarmCommodtiy");
                });

            modelBuilder.Entity("BusinessData.ofSmartFarm.EFarmCommodity", b =>
                {
                    b.HasBaseType("BusinessData.EStatus");

                    b.Property<string>("ChangedUsers")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Docs")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FarmCommodtiyId")
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("ImageofInfos")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SmartFarmId")
                        .HasColumnType("nvarchar(30)");

                    b.HasIndex("FarmCommodtiyId");

                    b.HasIndex("SmartFarmId");

                    b.HasDiscriminator().HasValue("EFarmCommodity");
                });

            modelBuilder.Entity("BusinessData.ofSmartFarm.MFarmCommodity", b =>
                {
                    b.HasBaseType("BusinessData.MStatus");

                    b.Property<string>("ChangedUsers")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Docs")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FarmCommodtiyId")
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("ImageofInfos")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SmartFarmId")
                        .HasColumnType("nvarchar(30)");

                    b.HasIndex("FarmCommodtiyId");

                    b.HasIndex("SmartFarmId");

                    b.HasDiscriminator().HasValue("MFarmCommodity");
                });

            modelBuilder.Entity("BusinessData.ofSmartFarm.SFarmCommodity", b =>
                {
                    b.HasBaseType("BusinessData.SStatus");

                    b.Property<string>("FarmCommodtiyId")
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("SmartFarmId")
                        .HasColumnType("nvarchar(30)");

                    b.HasIndex("FarmCommodtiyId");

                    b.HasIndex("SmartFarmId");

                    b.HasDiscriminator().HasValue("SFarmCommodity");
                });

            modelBuilder.Entity("BusinessData.Center", b =>
                {
                    b.HasOne("BusinessData.ofSmartFarm.EFarmCommodity", null)
                        .WithMany("SmartFarm")
                        .HasForeignKey("EFarmCommodityId");

                    b.HasOne("BusinessData.ofSmartFarm.FarmCommodtiy", null)
                        .WithMany("SmartFarm")
                        .HasForeignKey("FarmCommodtiyId");

                    b.HasOne("BusinessData.ofSmartFarm.FarmController", null)
                        .WithMany("SmartFarm")
                        .HasForeignKey("FarmControllerId");

                    b.HasOne("BusinessData.ofSmartFarm.MFarmCommodity", null)
                        .WithMany("SmartFarm")
                        .HasForeignKey("MFarmCommodityId");

                    b.HasOne("BusinessData.ofSmartFarm.SFarmCommodity", null)
                        .WithMany("SmartFarm")
                        .HasForeignKey("SFarmCommodityId");
                });

            modelBuilder.Entity("BusinessData.Commodity", b =>
                {
                    b.HasOne("BusinessData.Center", "Center")
                        .WithMany("Commodities")
                        .HasForeignKey("CenterId");

                    b.HasOne("BusinessData.ofSmartFarm.EFarmCommodity", null)
                        .WithMany("FarmCommodtiy")
                        .HasForeignKey("EFarmCommodityId");

                    b.HasOne("BusinessData.ofSmartFarm.MFarmCommodity", null)
                        .WithMany("FarmCommodtiy")
                        .HasForeignKey("MFarmCommodityId");

                    b.HasOne("BusinessData.ofSmartFarm.SFarmCommodity", null)
                        .WithMany("FarmCommodtiy")
                        .HasForeignKey("SFarmCommodityId");

                    b.Navigation("Center");
                });

            modelBuilder.Entity("BusinessData.EStatus", b =>
                {
                    b.HasOne("BusinessData.Center", "Center")
                        .WithMany("EStatuses")
                        .HasForeignKey("CenterId");

                    b.HasOne("BusinessData.Commodity", "Commodity")
                        .WithMany("EStatuses")
                        .HasForeignKey("CommodityId");

                    b.HasOne("BusinessData.MStatus", "MStatus")
                        .WithMany("EStatuses")
                        .HasForeignKey("MStatusId");

                    b.Navigation("Center");

                    b.Navigation("Commodity");

                    b.Navigation("MStatus");
                });

            modelBuilder.Entity("BusinessData.MStatus", b =>
                {
                    b.HasOne("BusinessData.Center", "Center")
                        .WithMany("MStatuses")
                        .HasForeignKey("CenterId");

                    b.HasOne("BusinessData.Commodity", "Commodity")
                        .WithMany("MStatuses")
                        .HasForeignKey("CommodityId");

                    b.HasOne("BusinessData.SStatus", "SStatus")
                        .WithMany("MStatuses")
                        .HasForeignKey("SStatusId");

                    b.Navigation("Center");

                    b.Navigation("Commodity");

                    b.Navigation("SStatus");
                });

            modelBuilder.Entity("BusinessData.SStatus", b =>
                {
                    b.HasOne("BusinessData.Center", "Center")
                        .WithMany("SStatuses")
                        .HasForeignKey("CenterId");

                    b.HasOne("BusinessData.Commodity", "Commodity")
                        .WithMany("SStatuses")
                        .HasForeignKey("CommodityId");

                    b.Navigation("Center");

                    b.Navigation("Commodity");
                });

            modelBuilder.Entity("BusinessData.ofSmartFarm.ControllerCommodity", b =>
                {
                    b.HasOne("BusinessData.ofSmartFarm.FarmCommodtiy", "FarmCommodtiy")
                        .WithOne("ControllerCommodity")
                        .HasForeignKey("BusinessData.ofSmartFarm.ControllerCommodity", "FarmCommodtiyId");

                    b.HasOne("BusinessData.ofSmartFarm.FarmController", "FarmController")
                        .WithOne("ControllerCommodity")
                        .HasForeignKey("BusinessData.ofSmartFarm.ControllerCommodity", "FarmCommodtiyId");

                    b.Navigation("FarmCommodtiy");

                    b.Navigation("FarmController");
                });

            modelBuilder.Entity("BusinessData.ofSmartFarm.EControllerValue", b =>
                {
                    b.HasOne("BusinessData.ofSmartFarm.ControllerCommodity", "ControllerCommodity")
                        .WithMany("EControllerValues")
                        .HasForeignKey("ControllerCommodityId");

                    b.HasOne("BusinessData.ofSmartFarm.EFarmCommodity", "EFarmCommodiy")
                        .WithMany("EControllerValues")
                        .HasForeignKey("EFarmCommodityId");

                    b.Navigation("ControllerCommodity");

                    b.Navigation("EFarmCommodiy");
                });

            modelBuilder.Entity("BusinessData.ofSmartFarm.FarmController", b =>
                {
                    b.HasOne("BusinessData.ofSmartFarm.SmartFarm", null)
                        .WithMany("FarmControllers")
                        .HasForeignKey("SmartFarmId");
                });

            modelBuilder.Entity("BusinessData.ofSmartFarm.MControllerValue", b =>
                {
                    b.HasOne("BusinessData.ofSmartFarm.ControllerCommodity", "ControllerCommodity")
                        .WithMany("MControllerValues")
                        .HasForeignKey("ControllerCommodityId");

                    b.HasOne("BusinessData.ofSmartFarm.MFarmCommodity", "MFarmCommodiy")
                        .WithMany("MControllerValues")
                        .HasForeignKey("MFarmCommodityId");

                    b.Navigation("ControllerCommodity");

                    b.Navigation("MFarmCommodiy");
                });

            modelBuilder.Entity("BusinessData.ofSmartFarm.SControllerValue", b =>
                {
                    b.HasOne("BusinessData.ofSmartFarm.ControllerCommodity", "ControllerCommodity")
                        .WithMany("SControllerValues")
                        .HasForeignKey("ControllerCommodityId");

                    b.HasOne("BusinessData.ofSmartFarm.SFarmCommodity", "SFarmCommodiy")
                        .WithMany("SControllerValues")
                        .HasForeignKey("SFarmCommodityId");

                    b.Navigation("ControllerCommodity");

                    b.Navigation("SFarmCommodiy");
                });

            modelBuilder.Entity("BusinessData.ofSmartFarm.FarmCommodtiy", b =>
                {
                    b.HasOne("BusinessData.ofSmartFarm.SmartFarm", null)
                        .WithMany("FarmCommodiites")
                        .HasForeignKey("SmartFarmId");
                });

            modelBuilder.Entity("BusinessData.ofSmartFarm.EFarmCommodity", b =>
                {
                    b.HasOne("BusinessData.ofSmartFarm.FarmCommodtiy", null)
                        .WithMany("EFarmCommodityes")
                        .HasForeignKey("FarmCommodtiyId");

                    b.HasOne("BusinessData.ofSmartFarm.SmartFarm", null)
                        .WithMany("EFarmCommodiites")
                        .HasForeignKey("SmartFarmId");
                });

            modelBuilder.Entity("BusinessData.ofSmartFarm.MFarmCommodity", b =>
                {
                    b.HasOne("BusinessData.ofSmartFarm.FarmCommodtiy", null)
                        .WithMany("MFarmCommodityes")
                        .HasForeignKey("FarmCommodtiyId");

                    b.HasOne("BusinessData.ofSmartFarm.SmartFarm", null)
                        .WithMany("MFarmCommodiites")
                        .HasForeignKey("SmartFarmId");
                });

            modelBuilder.Entity("BusinessData.ofSmartFarm.SFarmCommodity", b =>
                {
                    b.HasOne("BusinessData.ofSmartFarm.FarmCommodtiy", null)
                        .WithMany("SFarmCommodityes")
                        .HasForeignKey("FarmCommodtiyId");

                    b.HasOne("BusinessData.ofSmartFarm.SmartFarm", null)
                        .WithMany("SFarmCommodiites")
                        .HasForeignKey("SmartFarmId");
                });

            modelBuilder.Entity("BusinessData.Center", b =>
                {
                    b.Navigation("Commodities");

                    b.Navigation("EStatuses");

                    b.Navigation("MStatuses");

                    b.Navigation("SStatuses");
                });

            modelBuilder.Entity("BusinessData.Commodity", b =>
                {
                    b.Navigation("EStatuses");

                    b.Navigation("MStatuses");

                    b.Navigation("SStatuses");
                });

            modelBuilder.Entity("BusinessData.MStatus", b =>
                {
                    b.Navigation("EStatuses");
                });

            modelBuilder.Entity("BusinessData.SStatus", b =>
                {
                    b.Navigation("MStatuses");
                });

            modelBuilder.Entity("BusinessData.ofSmartFarm.ControllerCommodity", b =>
                {
                    b.Navigation("EControllerValues");

                    b.Navigation("MControllerValues");

                    b.Navigation("SControllerValues");
                });

            modelBuilder.Entity("BusinessData.ofSmartFarm.FarmController", b =>
                {
                    b.Navigation("ControllerCommodity");

                    b.Navigation("SmartFarm");
                });

            modelBuilder.Entity("BusinessData.ofSmartFarm.SmartFarm", b =>
                {
                    b.Navigation("EFarmCommodiites");

                    b.Navigation("FarmCommodiites");

                    b.Navigation("FarmControllers");

                    b.Navigation("MFarmCommodiites");

                    b.Navigation("SFarmCommodiites");
                });

            modelBuilder.Entity("BusinessData.ofSmartFarm.FarmCommodtiy", b =>
                {
                    b.Navigation("ControllerCommodity");

                    b.Navigation("EFarmCommodityes");

                    b.Navigation("MFarmCommodityes");

                    b.Navigation("SFarmCommodityes");

                    b.Navigation("SmartFarm");
                });

            modelBuilder.Entity("BusinessData.ofSmartFarm.EFarmCommodity", b =>
                {
                    b.Navigation("EControllerValues");

                    b.Navigation("FarmCommodtiy");

                    b.Navigation("SmartFarm");
                });

            modelBuilder.Entity("BusinessData.ofSmartFarm.MFarmCommodity", b =>
                {
                    b.Navigation("FarmCommodtiy");

                    b.Navigation("MControllerValues");

                    b.Navigation("SmartFarm");
                });

            modelBuilder.Entity("BusinessData.ofSmartFarm.SFarmCommodity", b =>
                {
                    b.Navigation("FarmCommodtiy");

                    b.Navigation("SControllerValues");

                    b.Navigation("SmartFarm");
                });
#pragma warning restore 612, 618
        }
    }
}
