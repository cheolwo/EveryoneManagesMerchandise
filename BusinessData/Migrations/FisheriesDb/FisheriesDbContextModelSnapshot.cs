// <auto-generated />
using System;
using BusinessData.ofCommon;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BusinessData.Migrations.FisheriesDb
{
    [DbContext(typeof(FisheriesDbContext))]
    partial class FisheriesDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, (int)1L, 1);

            modelBuilder.Entity("BusinessData.Center", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CardNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CardPassword")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Container")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CountryCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Cvv")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EFishCommodityId")
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("FailLogin")
                        .HasColumnType("int");

                    b.Property<string>("FaxNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FishCommodityId")
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("LoginId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MFishCommodityId")
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SFishCommodityId")
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EFishCommodityId");

                    b.HasIndex("FishCommodityId");

                    b.HasIndex("MFishCommodityId");

                    b.HasIndex("SFishCommodityId");

                    b.ToTable("Center");
                });

            modelBuilder.Entity("BusinessData.Commodity", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Barcode")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("CenterId")
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Container")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("EFishCommodityId")
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("HsCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MFishCommodityId")
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SFishCommodityId")
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CenterId");

                    b.HasIndex("EFishCommodityId");

                    b.HasIndex("MFishCommodityId");

                    b.HasIndex("SFishCommodityId");

                    b.ToTable("Commodity");
                });

            modelBuilder.Entity("BusinessData.EStatus", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("CenterId")
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CommodityId")
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Container")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("MStatusId")
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CenterId");

                    b.HasIndex("CommodityId");

                    b.HasIndex("MStatusId");

                    b.ToTable("EStatus");
                });

            modelBuilder.Entity("BusinessData.MStatus", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("CenterId")
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CommodityId")
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Container")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SStatusId")
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CenterId");

                    b.HasIndex("CommodityId");

                    b.HasIndex("SStatusId");

                    b.ToTable("MStatus");
                });

            modelBuilder.Entity("BusinessData.ofCommon.ofFisheries.ofModel.Copartnership", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Container")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Docs")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FisheriesId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageofInfos")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Copartnership", (string)null);
                });

            modelBuilder.Entity("BusinessData.SStatus", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("CenterId")
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CommodityId")
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Container")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CenterId");

                    b.HasIndex("CommodityId");

                    b.ToTable("SStatus");
                });

            modelBuilder.Entity("BusinessData.ofCommon.ofFisheries.ofModel.EFishCommodity", b =>
                {
                    b.HasBaseType("BusinessData.EStatus");

                    b.Property<string>("Docs")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FishCommodityId")
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("FisheriesId")
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("ImageofInfos")
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("FishCommodityId");

                    b.HasIndex("FisheriesId");

                    b.ToTable("EFishCommodity", (string)null);
                });

            modelBuilder.Entity("BusinessData.ofCommon.ofFisheries.ofModel.FishCommodity", b =>
                {
                    b.HasBaseType("BusinessData.Commodity");

                    b.Property<string>("CopartnershipId")
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Docs")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FisheriesId")
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("ImageofInfos")
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("CopartnershipId");

                    b.HasIndex("FisheriesId");

                    b.ToTable("FishCommodity", (string)null);
                });

            modelBuilder.Entity("BusinessData.ofCommon.ofFisheries.ofModel.Fisheries", b =>
                {
                    b.HasBaseType("BusinessData.Center");

                    b.Property<string>("Docs")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageofInfos")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Fisheries", (string)null);
                });

            modelBuilder.Entity("BusinessData.ofCommon.ofFisheries.ofModel.MFishCommodity", b =>
                {
                    b.HasBaseType("BusinessData.MStatus");

                    b.Property<string>("Docs")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FishCommodityId")
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("FisheriesId")
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("ImageofInfos")
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("FishCommodityId");

                    b.HasIndex("FisheriesId");

                    b.ToTable("MFishCommodity", (string)null);
                });

            modelBuilder.Entity("BusinessData.ofCommon.ofFisheries.ofModel.SFishCommodity", b =>
                {
                    b.HasBaseType("BusinessData.SStatus");

                    b.Property<string>("Docs")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FishCommodityId")
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("FisheriesId")
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("ImageofInfos")
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("FishCommodityId");

                    b.HasIndex("FisheriesId");

                    b.ToTable("SFishCommodity", (string)null);
                });

            modelBuilder.Entity("BusinessData.Center", b =>
                {
                    b.HasOne("BusinessData.ofCommon.ofFisheries.ofModel.EFishCommodity", null)
                        .WithMany("Fisheries")
                        .HasForeignKey("EFishCommodityId");

                    b.HasOne("BusinessData.ofCommon.ofFisheries.ofModel.FishCommodity", null)
                        .WithMany("Fisheries")
                        .HasForeignKey("FishCommodityId");

                    b.HasOne("BusinessData.ofCommon.ofFisheries.ofModel.MFishCommodity", null)
                        .WithMany("Fisheries")
                        .HasForeignKey("MFishCommodityId");

                    b.HasOne("BusinessData.ofCommon.ofFisheries.ofModel.SFishCommodity", null)
                        .WithMany("Fisheries")
                        .HasForeignKey("SFishCommodityId");
                });

            modelBuilder.Entity("BusinessData.Commodity", b =>
                {
                    b.HasOne("BusinessData.Center", "Center")
                        .WithMany("Commodities")
                        .HasForeignKey("CenterId");

                    b.HasOne("BusinessData.ofCommon.ofFisheries.ofModel.EFishCommodity", null)
                        .WithMany("FishCommodity")
                        .HasForeignKey("EFishCommodityId");

                    b.HasOne("BusinessData.ofCommon.ofFisheries.ofModel.MFishCommodity", null)
                        .WithMany("FishCommodity")
                        .HasForeignKey("MFishCommodityId");

                    b.HasOne("BusinessData.ofCommon.ofFisheries.ofModel.SFishCommodity", null)
                        .WithMany("FishCommodity")
                        .HasForeignKey("SFishCommodityId");

                    b.Navigation("Center");
                });

            modelBuilder.Entity("BusinessData.EStatus", b =>
                {
                    b.HasOne("BusinessData.Center", "Center")
                        .WithMany("EStatuses")
                        .HasForeignKey("CenterId");

                    b.HasOne("BusinessData.Commodity", "Commodity")
                        .WithMany("EStatuses")
                        .HasForeignKey("CommodityId");

                    b.HasOne("BusinessData.MStatus", "MStatus")
                        .WithMany("EStatuses")
                        .HasForeignKey("MStatusId");

                    b.Navigation("Center");

                    b.Navigation("Commodity");

                    b.Navigation("MStatus");
                });

            modelBuilder.Entity("BusinessData.MStatus", b =>
                {
                    b.HasOne("BusinessData.Center", "Center")
                        .WithMany("MStatuses")
                        .HasForeignKey("CenterId");

                    b.HasOne("BusinessData.Commodity", "Commodity")
                        .WithMany("MStatuses")
                        .HasForeignKey("CommodityId");

                    b.HasOne("BusinessData.SStatus", "SStatus")
                        .WithMany("MStatuses")
                        .HasForeignKey("SStatusId");

                    b.Navigation("Center");

                    b.Navigation("Commodity");

                    b.Navigation("SStatus");
                });

            modelBuilder.Entity("BusinessData.SStatus", b =>
                {
                    b.HasOne("BusinessData.Center", "Center")
                        .WithMany("SStatuses")
                        .HasForeignKey("CenterId");

                    b.HasOne("BusinessData.Commodity", "Commodity")
                        .WithMany("SStatuses")
                        .HasForeignKey("CommodityId");

                    b.Navigation("Center");

                    b.Navigation("Commodity");
                });

            modelBuilder.Entity("BusinessData.ofCommon.ofFisheries.ofModel.EFishCommodity", b =>
                {
                    b.HasOne("BusinessData.ofCommon.ofFisheries.ofModel.FishCommodity", null)
                        .WithMany("EFishCommodities")
                        .HasForeignKey("FishCommodityId");

                    b.HasOne("BusinessData.ofCommon.ofFisheries.ofModel.Fisheries", null)
                        .WithMany("EFishCommodities")
                        .HasForeignKey("FisheriesId");

                    b.HasOne("BusinessData.EStatus", null)
                        .WithOne()
                        .HasForeignKey("BusinessData.ofCommon.ofFisheries.ofModel.EFishCommodity", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BusinessData.ofCommon.ofFisheries.ofModel.FishCommodity", b =>
                {
                    b.HasOne("BusinessData.ofCommon.ofFisheries.ofModel.Copartnership", "Copartnership")
                        .WithMany()
                        .HasForeignKey("CopartnershipId");

                    b.HasOne("BusinessData.ofCommon.ofFisheries.ofModel.Fisheries", null)
                        .WithMany("FishCommodities")
                        .HasForeignKey("FisheriesId");

                    b.HasOne("BusinessData.Commodity", null)
                        .WithOne()
                        .HasForeignKey("BusinessData.ofCommon.ofFisheries.ofModel.FishCommodity", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Copartnership");
                });

            modelBuilder.Entity("BusinessData.ofCommon.ofFisheries.ofModel.Fisheries", b =>
                {
                    b.HasOne("BusinessData.Center", null)
                        .WithOne()
                        .HasForeignKey("BusinessData.ofCommon.ofFisheries.ofModel.Fisheries", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BusinessData.ofCommon.ofFisheries.ofModel.MFishCommodity", b =>
                {
                    b.HasOne("BusinessData.ofCommon.ofFisheries.ofModel.FishCommodity", null)
                        .WithMany("MFishCommodities")
                        .HasForeignKey("FishCommodityId");

                    b.HasOne("BusinessData.ofCommon.ofFisheries.ofModel.Fisheries", null)
                        .WithMany("MFishCommodities")
                        .HasForeignKey("FisheriesId");

                    b.HasOne("BusinessData.MStatus", null)
                        .WithOne()
                        .HasForeignKey("BusinessData.ofCommon.ofFisheries.ofModel.MFishCommodity", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BusinessData.ofCommon.ofFisheries.ofModel.SFishCommodity", b =>
                {
                    b.HasOne("BusinessData.ofCommon.ofFisheries.ofModel.FishCommodity", null)
                        .WithMany("SFishCommodities")
                        .HasForeignKey("FishCommodityId");

                    b.HasOne("BusinessData.ofCommon.ofFisheries.ofModel.Fisheries", null)
                        .WithMany("SFishCommodities")
                        .HasForeignKey("FisheriesId");

                    b.HasOne("BusinessData.SStatus", null)
                        .WithOne()
                        .HasForeignKey("BusinessData.ofCommon.ofFisheries.ofModel.SFishCommodity", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BusinessData.Center", b =>
                {
                    b.Navigation("Commodities");

                    b.Navigation("EStatuses");

                    b.Navigation("MStatuses");

                    b.Navigation("SStatuses");
                });

            modelBuilder.Entity("BusinessData.Commodity", b =>
                {
                    b.Navigation("EStatuses");

                    b.Navigation("MStatuses");

                    b.Navigation("SStatuses");
                });

            modelBuilder.Entity("BusinessData.MStatus", b =>
                {
                    b.Navigation("EStatuses");
                });

            modelBuilder.Entity("BusinessData.SStatus", b =>
                {
                    b.Navigation("MStatuses");
                });

            modelBuilder.Entity("BusinessData.ofCommon.ofFisheries.ofModel.EFishCommodity", b =>
                {
                    b.Navigation("FishCommodity");

                    b.Navigation("Fisheries");
                });

            modelBuilder.Entity("BusinessData.ofCommon.ofFisheries.ofModel.FishCommodity", b =>
                {
                    b.Navigation("EFishCommodities");

                    b.Navigation("Fisheries");

                    b.Navigation("MFishCommodities");

                    b.Navigation("SFishCommodities");
                });

            modelBuilder.Entity("BusinessData.ofCommon.ofFisheries.ofModel.Fisheries", b =>
                {
                    b.Navigation("EFishCommodities");

                    b.Navigation("FishCommodities");

                    b.Navigation("MFishCommodities");

                    b.Navigation("SFishCommodities");
                });

            modelBuilder.Entity("BusinessData.ofCommon.ofFisheries.ofModel.MFishCommodity", b =>
                {
                    b.Navigation("FishCommodity");

                    b.Navigation("Fisheries");
                });

            modelBuilder.Entity("BusinessData.ofCommon.ofFisheries.ofModel.SFishCommodity", b =>
                {
                    b.Navigation("FishCommodity");

                    b.Navigation("Fisheries");
                });
#pragma warning restore 612, 618
        }
    }
}
