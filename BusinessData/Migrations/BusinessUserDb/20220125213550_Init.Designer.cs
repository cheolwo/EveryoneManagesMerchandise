// <auto-generated />
using System;
using BusinessData.ofAccount;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BusinessData.Migrations.BusinessUserDb
{
    [DbContext(typeof(BusinessUserDbContext))]
    [Migration("20220125213550_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, (int)1L, 1);

            modelBuilder.Entity("BusinessData.ofAccount.ofModel.BusinessUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Container")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CoutryCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LogisticsCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("BusinessUser");
                });

            modelBuilder.Entity("BusinessData.ofAccount.ofModel.JournalSetting", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BusinessUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Credits")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Debits")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Purpose")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RelationCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BusinessUserId");

                    b.ToTable("JournalSetting");
                });

            modelBuilder.Entity("BusinessData.ofAccount.ofModel.PayService", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BusinessUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DetailServiceName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BusinessUserId");

                    b.ToTable("PayService");
                });

            modelBuilder.Entity("BusinessData.ofAccount.ofModel.TableSetting", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BusinessUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DetailColumnsSelected")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GetColumnsSelected")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ManagedMode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RelationCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ViewMode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BusinessUserId");

                    b.ToTable("TableSetting");
                });

            modelBuilder.Entity("BusinessData.ofAccount.ofModel.JournalSetting", b =>
                {
                    b.HasOne("BusinessData.ofAccount.ofModel.BusinessUser", "BusinessUser")
                        .WithMany("JournalSettings")
                        .HasForeignKey("BusinessUserId");

                    b.Navigation("BusinessUser");
                });

            modelBuilder.Entity("BusinessData.ofAccount.ofModel.PayService", b =>
                {
                    b.HasOne("BusinessData.ofAccount.ofModel.BusinessUser", "BusinessUser")
                        .WithMany("PayServices")
                        .HasForeignKey("BusinessUserId");

                    b.Navigation("BusinessUser");
                });

            modelBuilder.Entity("BusinessData.ofAccount.ofModel.TableSetting", b =>
                {
                    b.HasOne("BusinessData.ofAccount.ofModel.BusinessUser", "BusinessUser")
                        .WithMany("TableSettings")
                        .HasForeignKey("BusinessUserId");

                    b.Navigation("BusinessUser");
                });

            modelBuilder.Entity("BusinessData.ofAccount.ofModel.BusinessUser", b =>
                {
                    b.Navigation("JournalSettings");

                    b.Navigation("PayServices");

                    b.Navigation("TableSettings");
                });
#pragma warning restore 612, 618
        }
    }
}
