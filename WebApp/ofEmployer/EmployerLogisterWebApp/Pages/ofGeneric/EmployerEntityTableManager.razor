@using BusinessView.ofCommon.ofInterface
@using BusinessView.ofDTO.ofCommon
@using BusinessView.ofDTO.ofCommon.ofEmployer
@using BusinessView.ofViewModels.ofGeneric
@using BusinessView.ofViewModels.ofGeneric.ofCommon
@using MudBlazor
@using System.ComponentModel
@typeparam TEntity where TEntity : EmployerEntity, new()

@if(entityPageViewModel._EntityGetsViewModel.ComponentMode == ComponentMode.Get)
{
    <MudButton Variant="Variant.Filled" Color="Color.Primary">Put</MudButton>
    <MudTable Items=entityPageViewModel._EntityGetsViewModel.TEntitys>
        <HeaderContent>
            @foreach(var prop in OnlyGetProperties)
            {
                <MudTh>@prop.Name</MudTh>
            }
            <MudTh>Manager</MudTh>
        </HeaderContent>
        <RowTemplate>
            @foreach(var prop in OnlyGetProperties)
            {
                <MudTd>@prop.GetValue(@context)</MudTd>
            }
            <MudTd>
                c
                <MudButton Variant="Variant.Filled" Color="Color.Primary">Delete</MudButton>
                <MudButton Variant="Variant.Filled" Color="Color.Primary">Detail</MudButton>
            </MudTd>
    </RowTemplate>
    </MudTable>    
}
@if(entityPageViewModel._EntityGetsViewModel.ComponentMode == ComponentMode.Detail)
{
     <MudTable Items=entityPageViewModel._EntityGetsViewModel.TEntitys>
        
    </MudTable>    
}


@code {
    [Parameter] public EmployerPageViewModel<TEntity> entityPageViewModel { get; set; }
    public List<PropertyInfo> OnlyGetProperties = new();
    protected override Task OnInitializedAsync()
    {
        if (entityPageViewModel == null) { throw new NullReferenceException("EntityPageViewModel Is null"); }
        entityPageViewModel.OnInitialized(async (sernder, e) =>
        {
            await InvokeAsync(() =>
            {
                StateHasChanged();
            });
        });
        OnlyGetProperties = entityPageViewModel._EntityGetsViewModel.PropertiesByComponentMode;

        return base.OnInitializedAsync();
    }
    async void OnPropertyChangedHandler(object sender, PropertyChangedEventArgs e)
    {
        await InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }
    public void Dispose()
    {
        entityPageViewModel.PropertyChanged -= OnPropertyChangedHandler;
    }
}
