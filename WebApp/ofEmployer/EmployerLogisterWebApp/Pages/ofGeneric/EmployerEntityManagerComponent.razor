@using BusinessView.ofCommon.ofInterface
@using BusinessView.ofDTO.ofCommon
@using BusinessView.ofDTO.ofCommon.ofEmployer
@using BusinessView.ofViewModels.ofGeneric
@using BusinessView.ofViewModels.ofGeneric.ofCommon
@using MudBlazor
@using System.ComponentModel
@typeparam TEntity where TEntity : IEmployerEntity, new()
@if (EmployerPageViewModel.IsSelectGets)
{
    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="()=>EmployerPageViewModel.OnClickGetsToPost()">Post</MudButton>
    <MudTable Items=EmployerPageViewModel._EntityGetsViewModel.TEntitys>
        <HeaderContent>
            @foreach (var prop in OnlyGetProperties)
        {
            <MudTh>@prop.Name</MudTh>
        }
        <MudTh>Manager</MudTh>
    </HeaderContent>
    <RowTemplate>
        @foreach (var prop in OnlyGetProperties)
            {
                <MudTd>@prop.GetValue(context)</MudTd>
            }
        <MudTd>
            <MudButton Variant="Variant.Filled" Color="Color.Primary">Update</MudButton>
            <MudButton Variant="Variant.Filled" Color="Color.Primary">Delete</MudButton>
            <MudButton Variant="Variant.Filled" Color="Color.Primary">Detail</MudButton>
        </MudTd>
    </RowTemplate>
</MudTable>
}
@if(EmployerPageViewModel.IsSelectPost)
{
    <MudButton Variant="Variant.Filled" Color="Color.Primary">Post</MudButton>
    <EmployerPostComponent TEntity=TEntity _EmployerPostViewModel=EmployerPageViewModel._EmployerPostViewModel></EmployerPostComponent>
}
@if(EmployerPageViewModel.IsSelectPut)
{
    <MudButton Variant="Variant.Filled" Color="Color.Primary">Put</MudButton>
}
@if(EmployerPageViewModel.IsSelectDelete)
{
    <MudButton Variant="Variant.Filled" Color="Color.Primary">Delete</MudButton>
}
@if(EmployerPageViewModel.IsSelectDatail)
{
    <MudButton Variant="Variant.Filled" Color="Color.Primary">Detail</MudButton>
}



@code {
    [CascadingParameter(Name = "IdentityUserDTO")] public IdentityUserDTO? IdentityUserDTO { get; set; }
    [Parameter] public EmployerPageViewModel<TEntity> EmployerPageViewModel { get; set; }
    public List<PropertyInfo> OnlyGetProperties = new();
    protected override async Task OnInitializedAsync()
    {
        try
        {
            if (EmployerPageViewModel == null) { throw new NullReferenceException("EmployerPageViewModel Is null"); }
            EmployerPageViewModel.OnInitialized(async (sernder, e) =>
            {
                await InvokeAsync(() =>
                {
                    StateHasChanged();
                });
            });
            OnlyGetProperties = EmployerPageViewModel._EntityGetsViewModel.PropertiesByComponentMode;
            
            await EmployerPageViewModel._EntityGetsViewModel.InitializedAsync();
            
        }
        catch(Exception ex)
        {
            
        }
    }
    async void OnPropertyChangedHandler(object sender, PropertyChangedEventArgs e)
    {
        await InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }
    public void Dispose()
    {
        EmployerPageViewModel.PropertyChanged -= OnPropertyChangedHandler;
    }
}
