@using BusinessData.ofWarehouse.Model
@using BusinessLogic.ofManager.ofWarehouse
@inject IWarehouseManager WarehouseManager
@if(IsSelectedReturn)
{
    <MudButton OnClick="ClickSelectedEvent"></MudButton>
}
<MudTable Items="@Warehouses" MultiSelection="true" @bind-SelectedItems="selectedItems1" Hover="@hover">
    <HeaderContent>
        @if(IsRelatedCount)
        {
            <MudTh>창고Id</MudTh>
            <MudTh>창고명</MudTh>
            <MudTh>품목수</MudTh>
            <MudTh>입고수량</MudTh>
            <MudTh>적재수량</MudTh>
            <MudTh>출고수량</MudTh>
        }
        else
        {
            <MudTh>창고Id</MudTh>
            <MudTh>창고명</MudTh>
        }
    </HeaderContent>
    <RowTemplate>
        @if(IsRelatedCount)
        {
            <MudTd DataLabel="창고Id">@context.Id</MudTd>
            <MudTd DataLabel="창고명">@context.Name</MudTd>
            <MudTd DataLabel="품목수">@context.Commodities.Count()</MudTd>
            <MudTd DataLabel="입고수량">@context.SWCommodities.Count()</MudTd>
            <MudTd DataLabel="적재수량">@context.MWCommodities.Count()</MudTd>
            <MudTd DataLabel="출고수량">@context.EWCommodities.Count()</MudTd>
        }
        else
        {
            <MudTd DataLabel="창고Id">@context.Id</MudTd>
            <MudTd DataLabel="창고명">@context.Name</MudTd> 
        }
    </RowTemplate>
    <PagerContent>
        <MudTablePager PageSizeOptions="new int[]{50, 100}" />
    </PagerContent>
    <FooterContent> 
        <MudTd colspan="5">Select All</MudTd>
    </FooterContent>
</MudTable>
<MudText Inline="true">Selected items: @(selectedItems1==null ? "" : string.Join(", ", selectedItems1.OrderBy(x=>x.Name).Select(x=>x.Name)))</MudText>

@code {
    [CascadingParameter] public UserComponent? UserComponent { get; set; }
    [Parameter] public bool IsSelectedReturn { get; set; }
    [Parameter] public EventCallback<Warehouse> SelectWarehouse { get; set; }
    [Parameter] public bool IsRelatedCount { get; set; }
    public List<Warehouse> Warehouses = new List<Warehouse>();
    protected override async Task OnInitializedAsync()
    {
        if(UserComponent != null)
        {
            if(IsRelatedCount)
            {
                Warehouses = await WarehouseManager.GetToListByUserIdWithRelatedAsync(UserComponent.IdentityUser.Id);
            }
            Warehouses = await WarehouseManager.GetToListByUserAsync(UserComponent.IdentityUser);
        }
        else
        {
            if(IsRelatedCount)
            {
                Warehouses= await WarehouseManager.GetToListWithRelatedAsync();
            }
            Warehouses = await WarehouseManager.GetToListAsync();
        }
    }
    public void ClickSelectedEvent()
    {
        if(selectedItems1.Count > 0)
        {
            var sOCommodity = selectedItems1.FirstOrDefault();
            SelectWarehouse.InvokeAsync(sOCommodity);
        }
    }
    private bool hover = true;
    private HashSet<Warehouse> selectedItems1 = new HashSet<Warehouse>();
}

