@using BusinessData.ofAccount.ofModel
@using BusinessData.ofCommon.ofInterface
@using BusinessLogic.ofManager.ofGeneric
@using System.Reflection
@using System.ComponentModel.DataAnnotations
@typeparam TEntity where TEntity : Entity, IRelationable, ITablable, new();
@inject IEntityManager<TEntity> EntityManager
<MudDialog>
    <DialogContent>
        <MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors">
            @foreach (var prop in StringPropInfos)
            {
                @if(@prop.Name.Equals("Email") || @prop.Name.Equals("email"))
                {
                    <MudTextField T="string" @bind-Value="BusinessUser.Email" Label="Email" Required="true" RequiredError="필수 값입니다!"
                                  Validation="@(new EmailAddressAttribute() {ErrorMessage = "The email address is invalid"})"/>         
                }
                else
                {
                    <MudTextField T="string" @bind-Value=@prop.GetValue(Entity) Label=@prop.Name Required="true" RequiredError="필수 값입니다!"></MudTextField>
                }
            }    
            @* 외래키가 되는 부분의 경우 직접적으로 조정가능하게 만드는 게 좋으려나 *@
            @foreach (var prop in IntPropInfos)
            {
                    
            }             
        </MudForm>   
    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" DisableElevation="true" OnClick="@(()=>form.Validate())">Validate</MudButton>
            <MudButton Variant="Variant.Filled" Color="Color.Secondary" DisableElevation="true" OnClick="@(()=>form.Reset())" Class="mx-2">Reset</MudButton>
            <MudButton Variant="Variant.Filled" DisableElevation="true" OnClick="@(()=>form.ResetValidation())">Reset Validation</MudButton>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="CreateAsync">Create</MudButton>
    </DialogActions>
</MudDialog>
@code
{
    [CascadingParameter] public MudDialogInstance MudDialog { get; set; }
    void Cancel() => MudDialog.Cancel();
    bool success;
    string[] errors = { };
    MudForm form;
    [Parameter] public List<TEntity> Entities {get; set;} // 변화를 기록하기 위해 받았네.
    [Parameter] public IEnumerable<PropertyInfo> UsingPropertyInfos {get; set;}
    public RenderFragment ChildFragment {get; set;}
    public PropertyInfo[] PropertyInfos = new PropertyInfo[20];
    public TEntity Entity = new();
    public List<PropertyInfo> StringPropInfos = new();
    public List<PropertyInfo> IntPropInfos = new();
    protected override async Task OnInitializedAsync()
    {
        PropertyInfos = typeof(TEntity).GetProperties();
        foreach(var prop in PropertyInfos)
        {
            if(prop.PropertyType.Equals(typeof(string)))
            {
                StringPropInfos.Add(prop);
            }
            else
            {
                IntPropInfos.Add(prop);
            }
        }
    }
    public async Task CreateAsync()
    {
        var NewEntity = await EntityManager.CreateAsync(Entity);
        MudDialog.Close(DialogResult.Ok(true));
        Entities.Add(NewEntity);
        StateHasChanged(); // 이걸로 커버가 안되면 NavigateTo를 사용해야지.
    }
}