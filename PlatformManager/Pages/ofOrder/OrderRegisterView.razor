@using BusinessData.ofOrder.ofModel
@using BusinessData.ofWarehouse.Model
@using PlatformManager.ofComponent.ofBusinessUser
@using PlatformManager.ofComponent.ofOrder
@using PlatformManager.ofComponent.ofOrder.ofSOCommodity
@using PlatformManager.ofComponent.ofWarehouse
@inject IDialogService DialogService
@inject NavigationManager _NavigationManager
@inject IEntityManager<BusinessUser> _BusinessUserManager
@page "/Register/Order"
@if(BusinessUser != null)
{
	BusienssUser.Name;
}
<MudButton @onclick="OpenDialog" Variant="Variant.Filled" Color="Color.Primary">
	사업자등록
</MudButton>
<BusinessUserGetByBusinessCode EventCreateBusinessUserAsync="CreateBusinssUserAsync"></BusinessUserGetByBusinessCode>
<UserComponent>
	@if (IsSelectedSOCommodity)
	{
		<MudTextField @bind-Value="SOCommodity.Quantity" Label="Outlined" Variant="Variant.Outlined">수량</MudTextField>
		<MudTextField @bind-Value="SOCommodity.Price" Label="Outlined" Variant="Variant.Outlined">가격</MudTextField>
	}
	else
	{
		<SOCommodityTableComponent SelectedSOcommodity=SelectSOCommodity></SOCommodityTableComponent>
	}
	@if (IsSelectedWarehouse)
	{
		<MudTextField @bind-Value="Warehouse.Name" Label="Outlined" Variant="Variant.Outlined">창고이름</MudTextField>
	}
	else
	{
		<WareohuseTableComponent SelectWarehouse=SelectWarehouse></WareohuseTableComponent>
	}
</UserComponent>
<MudButton Variant="Variant.Filled" Color="Color.Primary">뒤로</MudButton>
<MudButton Variant="Variant.Filled" Color="Color.Primary">등록</MudButton>
@code {
	public BusinessUser BusinessUser { get; set; }
	public bool IsSelectedSOCommodity { get; set; }
	public bool IsSelectedWarehouse { get; set; }
	public Warehouse Warehouse { get; set; }
	public SOCommodity SOCommodity { get; set; }
	protected override void OnInitialized()
	{
		base.OnInitialized();
		Warehouse = new();
		BusinessUser = new();
		SOCommodity = new();
		IsSelectedSOCommodity = false;
		IsSelectedWarehouse = false;
	}
	public async Task SearchBusinessUserByNumber(string businessNumber)
	{
		BusinessUser = await _BusinessUserManager.GetByCodeAsny(businessNumber);
	}
	public async Task CreateBusinessUserAsync(BusinessUser businessUser)
	{
		BusinessUser = await _BusinessUserManager.CreateAsync(businessUser);
	}
	public void SelectWarehouse(Warehouse warehouse)
	{
		Warehouse = warehouse;
		IsSelectedWarehouse = true;
	}
	public void SelectSOCommodity(SOCommodity soCommodity)
	{
		SOCommodity.CenterId = soCommodity.CenterId;
		SOCommodity.CommodityId = soCommodity.CommodityId;
		SOCommodity.Incorterms = soCommodity.Incorterms;
		SOCommodity.Quantity = soCommodity.Quantity;
		SOCommodity.QualityTerms = soCommodity.QualityTerms;
		SOCommodity.Price = soCommodity.Price;
		SOCommodity.Name = soCommodity.Name;
		SOCommodity.UserId = soCommodity.UserId;
		IsSelectedSOCommodity = true;
	}
	private void OpenDialog()
	{
		var options = new DialogOptions { CloseOnEscapeKey = true };
		DialogService.Show<BusinessUserCreateByDialog>("사업자등록", options);
	}
}
