@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject UserManager<IdentityUser> UserManager
@inject UserManager<IdentityRole> RoleManager
@inject IHttpContextAccessor HttpContextAccessor
@inject ProtectedLocalStorage ProtectedLocalStorage
@inject NavigationManager NavigationManager

<h3>UserComponent</h3>
@if(isConnected)
{
    <h3>@IdentityUser.UserName</h3>
    <CascadingValue Value="this">
        @EntityFragment
    </CascadingValue>
    @EntityFragment
}
else
{
    <p>Loading...</p>
}
@code {
    [Parameter] public RenderFragment ?EntityFragment { get; set; }
    [Parameter] public string Role { get; set; }
    private bool isConnected = false;
    public IdentityUser IdentityUser = new();
    protected override async Task OnParameterSetAsync()
    {
        if(Role != null)
        {
            bool IsFind = await RoleManager.FindByNameAsync(Role);
            if(IsFind) {return;}
            else {
                throw new ArgumentException("Role Is Not Include In IdentityDatabase");
            }
        }
        throw new ArgumentException("Role Is Required Parameter");
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            IdentityUser = await UserManager.GetUserAsync(HttpContextAccessor.HttpContext.User);
            if (IdentityUser != null)
            {
                var IsInRole = await UserManager.IsInRoleAsync(IdentityUser, Role);
                if (!IsInRole) { NavigationManager.NavigateTo("/Register/{Role}"); }
            }
            else
            {
                IdentityUser = await UserManager.GetUserAsync(HttpContextAccessor.HttpContext.User);
                if (IdentityUser != null)
                {
                    await ProtectedLocalStorage.SetAsync(IdentityUser.Id, IdentityUser);
                    //var IsInRole = await UserManager.IsInRoleAsync(IdentityUser, Role);
                    //if (!IsInRole) { NavigationManager.NavigateTo("/Create/{Role}"); }
                }
                else { NavigationManager.NavigateTo("/Create/User"); }

            }
            isConnected = true;
            StateHasChanged();
        }
        else
        {
            var Result = await ProtectedLocalStorage.GetAsync<IdentityUser>("IdentityUser");
            isConnected = true;
        }
    }
}
